@page "/"
@using System.Text.Json
@using Zion.NFe.Danfe
@using Zion.NFe.Danfe.Modelo
@inject ILogger<Home> Logger
@rendermode InteractiveServer

<PageTitle>Visualizador de DANFE</PageTitle>

<FluentGrid Justify="@Justification">
    <FluentGridItem xs="12">
        <FluentInputFile Id="my-file-uploader"
                         Mode="InputFileMode.SaveToTemporaryFolder"
                         Multiple="true"
                         MaximumFileSize="@(10*1024*1024)"
                         Accept=".xml"
                         @bind-ProgressPercent="@ProgressPercent"
                         OnCompleted="@OnCompletedAsync"
                         Style="height: 150px;  border: 1px dashed var(--accent-fill-rest);">
            <ChildContent>
                <label for="my-file-uploader">
                    <FluentIcon Value="@(new @Icons.Regular.Size24.ArrowUpload())" />
                </label>

                <div>
                    Solte o arquivo XML de NF-e aqui
                    ou <label for="my-file-uploader">selecione</label>
                    para gerar o DANFE.
                    <br />
                </div>
            </ChildContent>
        </FluentInputFile>
    </FluentGridItem>
    @if (!string.IsNullOrWhiteSpace(PdfBase64))
    {
        <FluentGridItem xs="12">
            <iframe id="pdfIframe" src="@PdfBase64" width="100%" height="968"></iframe>
        </FluentGridItem>
    }
</FluentGrid>

@code {
    JustifyContent Justification = JustifyContent.Center;
    private string PdfBase64;
    int ProgressPercent = 0;
    FluentInputFileEventArgs[] Files = Array.Empty<FluentInputFileEventArgs>();

    private async Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> files)
    {
        PdfBase64 = string.Empty;
        Files = files.ToArray();

        foreach (var file in Files)
        {
            PdfBase64 = GerarDanfe(file);
            file.LocalFile?.Delete();
        }

        ProgressPercent = 0;
    }

    private string GerarDanfe(FluentInputFileEventArgs file)
    {
        ArgumentNullException.ThrowIfNull(file);
        if (string.IsNullOrWhiteSpace(file.LocalFile?.FullName))
        {
            Logger.LogWarning(
                $"Tentou gerar Danfe para file.LocalFile?.FullName nulo ou vazio. {JsonSerializer.Serialize(file)}");
            return string.Empty;
        }

        //Cria o modelo a partir do arquivo Xml da NF-e.
        var modelo = DanfeViewModelCreator.CriarDeArquivoXml(file.LocalFile.FullName);
        using var pdfStream = new MemoryStream();
        using var danfe = new DanfeDoc(modelo);
        danfe.Gerar();
        var base64String = Convert.ToBase64String(danfe.ObterPdfBytes(pdfStream));
        return $"data:application/pdf;base64,{base64String}";
    }

}