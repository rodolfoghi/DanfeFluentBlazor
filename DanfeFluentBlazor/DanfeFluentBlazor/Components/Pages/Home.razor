@page "/"
@using System.Text.Json
@using NFe.Classes
@using Zion.NFe.Danfe
@using Zion.NFe.Danfe.Modelo

@inject ILogger<Home> Logger
@inject IMessageService MessageService
@rendermode InteractiveServer

<PageTitle>Visualizador de DANFE</PageTitle>

<FluentGrid Justify="@Justification">
    <FluentGridItem xs="12">
        <FluentMessageBarProvider />
    </FluentGridItem>
    <FluentGridItem xs="12">
        <FluentInputFile Id="my-file-uploader"
                         Mode="InputFileMode.SaveToTemporaryFolder"
                         MaximumFileSize="@(10*1024*1024)"
                         Accept=".xml"
                         @bind-ProgressPercent="@ProgressPercent"
                         OnCompleted="@OnCompletedAsync"
                         Style="height: 150px;  border: 1px dashed var(--accent-fill-rest);">
            <ChildContent>
                <label for="my-file-uploader">
                    <FluentIcon Value="@(new @Icons.Regular.Size24.ArrowUpload())" />
                </label>

                <div>
                    Solte o arquivo XML de NF-e aqui
                    ou <label for="my-file-uploader">selecione</label>
                    para gerar o DANFE.
                    <br />
                </div>
            </ChildContent>
        </FluentInputFile>
    </FluentGridItem>
    @if (!string.IsNullOrWhiteSpace(PdfBase64))
    {
        <FluentCard>
            <FluentTabs Width="100%">
                <FluentTab Label="DANFE" Icon="@(new Icons.Regular.Size24.DocumentPdf())" Id="tab-1">
                    <FluentGridItem xs="12">
                        <iframe id="pdfIframe" src="@PdfBase64" style="width: 100%;" height="1080"></iframe>
                    </FluentGridItem>
                </FluentTab>
                <FluentTab Label="Identificação da NF-e" Icon="@(new Icons.Regular.Size24.DataArea())" Id="tab-2">
                    <DadosNFe nfeProc="@nfeProc" />
                </FluentTab>
                <FluentTab Label="Produtos e serviços" Icon="@(new Icons.Filled.Size20.Box())" Id="tab-3">
                    <ProdutosEServicos nfeProc="@nfeProc" />
                </FluentTab>
            </FluentTabs>
        </FluentCard>
    }

</FluentGrid>

@code {
    JustifyContent Justification = JustifyContent.Center;
    private string PdfBase64 = string.Empty;
    int ProgressPercent = 0;
    FluentInputFileEventArgs[] Files = Array.Empty<FluentInputFileEventArgs>();
    nfeProc? nfeProc;

    private async Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> files)
    {
        MessageService.Clear();
        PdfBase64 = string.Empty;
        Files = files.ToArray();

        foreach (var file in Files)
        {
            if (file.ContentType != "text/xml")
            {
                string message = "Selecione um arquivo XML";
                await MessageService.ShowMessageBarAsync(message, MessageIntent.Warning);
            }
            PdfBase64 = GerarDanfe(file);
            file.LocalFile?.Delete();
        }

        ProgressPercent = 0;
    }

    private string GerarDanfe(FluentInputFileEventArgs file)
    {
        ArgumentNullException.ThrowIfNull(file);
        if (string.IsNullOrWhiteSpace(file.LocalFile?.FullName))
        {
            Logger.LogWarning(
                $"Tentou gerar Danfe para file.LocalFile?.FullName nulo ou vazio. {JsonSerializer.Serialize(file)}");
            return string.Empty;
        }

        //Cria o modelo a partir do arquivo Xml da NF-e.
        nfeProc = new nfeProc().CarregarDeArquivoXml(file.LocalFile.FullName);

        var danfeViewModel = DanfeViewModelCreator.CriarDeArquivoXml(file.LocalFile.FullName);
        using var pdfStream = new MemoryStream();
        using var danfe = new DanfeDoc(danfeViewModel);
        danfe.Gerar();
        var base64String = Convert.ToBase64String(danfe.ObterPdfBytes(pdfStream));
        return $"data:application/pdf;base64,{base64String}";
    }

}