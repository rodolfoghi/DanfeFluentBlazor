@page "/"
@rendermode InteractiveServer

<PageTitle>Visualizador de DANFE</PageTitle>

<FluentGrid Justify="@Justification">
    <FluentGridItem xs="12">
        <FluentInputFile Id="my-file-uploader"
                            Mode="InputFileMode.SaveToTemporaryFolder"
                            Multiple="true"
                            MaximumFileSize="@(10*1024*1024)"
                            Accept=".xml"
                            @bind-ProgressPercent="@ProgressPercent"
                            OnCompleted="@OnCompletedAsync"
                            Style="height: 150px;  border: 1px dashed var(--accent-fill-rest);">
            <ChildContent>
                <label for="my-file-uploader">
                    <FluentIcon Value="@(new @Icons.Regular.Size24.ArrowUpload())" />
                </label>

                <div>
                    Solte o arquivo XML de NF-e aqui
                    ou <label for="my-file-uploader">selecione</label>
                    para gerar o DANFE.
                    <br />
                </div>
            </ChildContent>
        </FluentInputFile>

        @if (Files.Any())
        {
            <FluentLabel Typo="Typography.H1"> Arquivos enviados </FluentLabel>
            <FluentDataGrid Items="@Files.AsQueryable()">
                <PropertyColumn Property="@(f => f.Name)" Title="Nome" Width="440px" />
                <TemplateColumn Align="@Align.Start" Width="60px">
                    <FluentButton Title="Baixar DANFE" aria-label="Baixar DANFE" IconEnd="@(new Icons.Regular.Size16.ArrowDownload())" />
                </TemplateColumn>
                <PropertyColumn Property="@(f => $"{Decimal.Divide(f.Size, 1024):N} KB")" Title="Tamanho" Width="100px" />
                <PropertyColumn Property="@(f => f.ErrorMessage)" title="Observações" Sortable="true" />
            </FluentDataGrid>
            @*             <h4>File(s) uploaded:</h4>
        <ul>
        @foreach (var file in Files)
        {
        <li>
        <b>@file.Name</b> 🔹
        @($"{Decimal.Divide(file.Size, 1024):N} KB") 🔹
        @file.ContentType 🔹
        @file.LocalFile?.FullName
        @file.ErrorMessage
        </li>
        }
        </ul> *@
        }
    </FluentGridItem>
</FluentGrid>

@code {
    JustifyContent Justification = JustifyContent.Center;
    int ProgressPercent = 0;
    FluentInputFileEventArgs[] Files = Array.Empty<FluentInputFileEventArgs>();
    private async Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> files)
    {
        Files = files.ToArray();

        // // For the demo, delete these files.
        // foreach (var file in Files)
        // {
        //     file.LocalFile?.Delete();
        // }

        // // Wait 3 seconds before to reset the progress bar.
        // await Task.Delay(3000);
        ProgressPercent = 0;
    }
}