@using NFe.Classes
@using NFe.Classes.Informacoes.Detalhe
@using NFe.Classes.Informacoes.Detalhe.Tributacao
@using NFe.Classes.Informacoes.Detalhe.Tributacao.Estadual

<FluentGrid>
    <FluentGridItem xs="12">
        <FluentAccordion>
            @foreach (var detalhe in nfeProc.NFe.infNFe.det)
            {
                <FluentAccordionItem Heading="@detalhe.prod.xProd" Expanded="true" Style="margin: .5em auto;">
                    <FluentIcon Value="@(new Icons.Regular.Size20.Cube())" Slot="start" />
                    <FluentGrid>
                        <FluentGridItem xs="2">
                            <FluentTextField Label="Código do produto" Value="@detalhe.prod.cProd" ReadOnly Size="100" />
                        </FluentGridItem>
                        <FluentGridItem xs="2">
                            <FluentTextField Label="NCM" Value="@detalhe.prod.NCM" ReadOnly Size="100" />
                        </FluentGridItem>
                        <FluentGridItem xs="2">
                            <FluentTextField Label="CFOP" Value="@detalhe.prod.CFOP.ToString()" ReadOnly Size="100" />
                        </FluentGridItem>
                        <FluentGridItem xs="6"></FluentGridItem>

                        <FluentGridItem xs="2">
                            <FluentNumberField Label="Quantidade comercial" Value="@detalhe.prod.qCom" ReadOnly Size="100" />
                        </FluentGridItem>
                        <FluentGridItem xs="2">
                            <FluentTextField Label="Unidade comercial " Value="@detalhe.prod.uCom" ReadOnly Size="100" />
                        </FluentGridItem>
                        <FluentGridItem xs="2">
                            <FluentNumberField Label="Valor unitário" Value="@detalhe.prod.vUnCom" ReadOnly Size="100" />
                        </FluentGridItem>
                        <FluentGridItem xs="2">
                            <FluentNumberField Label="Valor total bruto" Value="@detalhe.prod.vProd" ReadOnly Size="100" />
                        </FluentGridItem>
                        <FluentGridItem xs="4"></FluentGridItem>

                        <FluentGridItem xs="12">
                            <details style="margin-left: 2em;">
                                <summary>Quantidade, unidade e valor unitário tributável</summary>
                                <FluentGrid>
                                    <FluentGridItem xs="2">
                                        <FluentNumberField Label="Quantidade tributável" Value="@detalhe.prod.qTrib" ReadOnly Size="100" />
                                    </FluentGridItem>
                                    <FluentGridItem xs="2">
                                        <FluentTextField Label="Unidade tributável" Value="@detalhe.prod.uTrib" ReadOnly Size="100" />
                                    </FluentGridItem>
                                    <FluentGridItem xs="2">
                                        <FluentNumberField Label="Valor unitário tributável" Value="@detalhe.prod.vUnTrib" ReadOnly Size="100" />
                                    </FluentGridItem>
                                    <FluentGridItem xs="6"></FluentGridItem>
                                </FluentGrid>
                            </details>
                        </FluentGridItem>

                        <FluentGridItem xs="12">
                            <details style="margin-left: 2em;">
                                <summary>Frete, seguro e outras despesas</summary>
                                <FluentGrid>
                                    <FluentGridItem xs="2">
                                        <FluentNumberField Label="Frete" Value="@detalhe.prod.vFrete" ReadOnly Size="100" />
                                    </FluentGridItem>
                                    <FluentGridItem xs="2">
                                        <FluentNumberField Label="Seguro" Value="@detalhe.prod.vSeg" ReadOnly Size="100" />
                                    </FluentGridItem>
                                    <FluentGridItem xs="2">
                                        <FluentNumberField Label="Desconto" Value="@detalhe.prod.vDesc" ReadOnly Size="100" />
                                    </FluentGridItem>
                                    <FluentGridItem xs="2">
                                        <FluentNumberField Label="Outras despesas acessórias" Value="@detalhe.prod.vOutro" ReadOnly Size="100" />
                                    </FluentGridItem>
                                </FluentGrid>
                            </details>
                        </FluentGridItem>

                        <FluentGridItem xs="1">
                            <FluentLabel Typo="Typography.H6" Alignment="HorizontalAlignment.Right"> ICMS </FluentLabel>
                        </FluentGridItem>
                        <FluentGridItem xs="1">
                            <FluentTextField Label="CST" Value="@IcmsCst(detalhe)" ReadOnly Size="100" />
                        </FluentGridItem>
                        <FluentGridItem xs="2">
                            <FluentNumberField Label="Base de cálculo" Value="IcmsBaseDeCalculo(detalhe.imposto.ICMS)" ReadOnly Size="100" />
                        </FluentGridItem>
                        <FluentGridItem xs="1">
                            <FluentNumberField Label="Alíquota" Value="IcmsAliquota(detalhe.imposto.ICMS)" ReadOnly Size="100" />
                        </FluentGridItem>
                        <FluentGridItem xs="2">
                            <FluentNumberField Label="Valor" Value="ObterValorDoIcms(detalhe.imposto.ICMS)" ReadOnly Size="100" />
                        </FluentGridItem>
                    </FluentGrid>
                </FluentAccordionItem>
            }
        </FluentAccordion>
    </FluentGridItem>
</FluentGrid>

@code {
    [Parameter] public nfeProc nfeProc { get; set; } = new();

    private string IcmsCst(det detalhe)
    {
        var tipoICMS = detalhe.imposto.ICMS.TipoICMS.GetType().ToString();
        var cst = new String(tipoICMS.Where(Char.IsDigit).ToArray());

        return cst;
    }

    private decimal IcmsBaseDeCalculo(ICMS icms)
    {
        if (icms.TipoICMS is ICMS00 icms00)
        {
            return icms00.vBC;
        }
        else if (icms.TipoICMS is ICMS10 icms10)
        {
            return icms10.vBC;
        }
        else if (icms.TipoICMS is ICMS20 icms20)
        {
            return icms20.vBC;
        }
        else if (icms.TipoICMS is ICMS70 icms70)
        {
            return icms70.vBC;
        }
        else if (icms.TipoICMS is ICMSPart icmsPart)
        {
            return icmsPart.vBC;
        }

        return 0;
    }

    private decimal IcmsAliquota(ICMS icms)
    {
        if (icms.TipoICMS is ICMS00 icms00)
        {
            return icms00.pICMS;
        }

        if (icms.TipoICMS is ICMS10 icms10)
        {
            return icms10.pICMS;
        }

        if (icms.TipoICMS is ICMS20 icms20)
        {
            return icms20.pICMS;
        }

        if (icms.TipoICMS is ICMS70 icms70)
        {
            return icms70.pICMS;
        }

        if (icms.TipoICMS is ICMSPart icmsPart)
        {
            return icmsPart.pICMS;
        }

        return 0;
    }

    public decimal ObterValorDoIcms(ICMS icms)
    {
        if (icms.TipoICMS is ICMS00 icms00)
        {
            return icms00.vICMS;
        }

        if (icms.TipoICMS is ICMS10 icms10)
        {
            return icms10.vICMS;
        }

        if (icms.TipoICMS is ICMS20 icms20)
        {
            return icms20.vICMS;
        }

        if (icms.TipoICMS is ICMS70 icms70)
        {
            return icms70.vICMS;
        }

        if (icms.TipoICMS is ICMSPart icmsPart)
        {
            return icmsPart.vICMS;
        }

        return 0;
    }

}

